//Source code generated by AppGPT (www.appgpt.tech)

//Class to create tables and seed new database
import { DataSource } from 'typeorm';
import { DBConfiguration } from './Configuration';
import { SettingsEntity } from './db/Settings.entity';
//autogenerate imports based on resources
import { UsersEntity } from './db/Users.entity';
import { DepartmentsEntity } from './db/Departments.entity';
import { InitiativesEntity } from './db/Initiatives.entity';
import { GoalsEntity } from './db/Goals.entity';
import { EmissionSourcesEntity } from './db/EmissionSources.entity';
import { ResourceUsageEntity } from './db/ResourceUsage.entity';

export class Database {
  static dbConfiguration: DBConfiguration;
  public static ds: DataSource;

  static async Initialize(dbConfiguration: DBConfiguration) {
    Database.dbConfiguration = dbConfiguration;
    let dbConfig: any = dbConfiguration as any;
    //Autogenerate entities array from resource names

    dbConfig.entities = [
      SettingsEntity,
      UsersEntity,
      DepartmentsEntity,
      InitiativesEntity,
      GoalsEntity,
      EmissionSourcesEntity,
      ResourceUsageEntity,
    ];
    Database.ds = new DataSource(dbConfig);
    await Database.ds.initialize();

    //TODO: Drop all tables

    await Database.Seed();
  }
  static async Seed() {
    let data: any = {
      Users: [
        {
          userName: 'userName 1',
          department: 1,
          password: 'password 1',
          email: 'email 1',
          id: 8,
        },
        {
          userName: 'userName 2',
          department: 2,
          password: 'password 2',
          email: 'email 2',
          id: 94,
        },
        {
          userName: 'userName 3',
          department: 3,
          password: 'password 3',
          email: 'email 3',
          id: 92,
        },
        {
          userName: 'userName 4',
          department: 4,
          password: 'password 4',
          email: 'email 4',
          id: 57,
        },
        {
          userName: 'userName 5',
          department: 5,
          password: 'password 5',
          email: 'email 5',
          id: 53,
        },
      ],
      Departments: [
        { departmentName: 'departmentName 1', departmentHead: 1, id: 46 },
        { departmentName: 'departmentName 2', departmentHead: 2, id: 12 },
        { departmentName: 'departmentName 3', departmentHead: 3, id: 96 },
        { departmentName: 'departmentName 4', departmentHead: 4, id: 14 },
        { departmentName: 'departmentName 5', departmentHead: 5, id: 33 },
      ],
      Initiatives: [
        {
          name: 'name 1',
          description: 'description 1',
          startDate: '2024-04-22T13:20:33.356Z',
          endDate: '2024-08-28T13:45:46.302Z',
          relatedDepartment: 1,
          status: 'status 1',
          id: 82,
        },
        {
          name: 'name 2',
          description: 'description 2',
          startDate: '2024-10-24T17:01:09.882Z',
          endDate: '2023-09-12T03:06:08.000Z',
          relatedDepartment: 2,
          status: 'status 2',
          id: 11,
        },
        {
          name: 'name 3',
          description: 'description 3',
          startDate: '2025-02-22T12:42:52.362Z',
          endDate: '2023-07-29T17:25:44.885Z',
          relatedDepartment: 3,
          status: 'status 3',
          id: 85,
        },
        {
          name: 'name 4',
          description: 'description 4',
          startDate: '2024-03-12T06:01:13.532Z',
          endDate: '2024-01-06T12:16:32.121Z',
          relatedDepartment: 4,
          status: 'status 4',
          id: 39,
        },
        {
          name: 'name 5',
          description: 'description 5',
          startDate: '2024-04-14T12:35:38.255Z',
          endDate: '2023-07-23T05:08:45.938Z',
          relatedDepartment: 5,
          status: 'status 5',
          id: 80,
        },
      ],
      Goals: [
        {
          name: 'name 1',
          description: 'description 1',
          targetDate: '2023-12-29T09:50:10.416Z',
          relatedDepartment: 1,
          status: 'status 1',
          id: 62,
        },
        {
          name: 'name 2',
          description: 'description 2',
          targetDate: '2023-07-25T20:14:17.678Z',
          relatedDepartment: 2,
          status: 'status 2',
          id: 69,
        },
        {
          name: 'name 3',
          description: 'description 3',
          targetDate: '2024-11-12T17:25:28.199Z',
          relatedDepartment: 3,
          status: 'status 3',
          id: 83,
        },
        {
          name: 'name 4',
          description: 'description 4',
          targetDate: '2024-01-11T17:55:14.614Z',
          relatedDepartment: 4,
          status: 'status 4',
          id: 23,
        },
        {
          name: 'name 5',
          description: 'description 5',
          targetDate: '2024-07-28T16:34:48.873Z',
          relatedDepartment: 5,
          status: 'status 5',
          id: 11,
        },
      ],
      EmissionSources: [
        {
          sourceType: 'sourceType 1',
          quantityUsed: 0.34,
          emissionFactors: 0.85,
          totalEmissions: 0.6,
          id: 6,
        },
        {
          sourceType: 'sourceType 2',
          quantityUsed: 0.85,
          emissionFactors: 0.5,
          totalEmissions: 0.43,
          id: 27,
        },
        {
          sourceType: 'sourceType 3',
          quantityUsed: 0.77,
          emissionFactors: 0.39,
          totalEmissions: 0.74,
          id: 47,
        },
        {
          sourceType: 'sourceType 4',
          quantityUsed: 0.37,
          emissionFactors: 0.38,
          totalEmissions: 0.58,
          id: 88,
        },
        {
          sourceType: 'sourceType 5',
          quantityUsed: 0.66,
          emissionFactors: 0.88,
          totalEmissions: 0.64,
          id: 87,
        },
      ],
      ResourceUsage: [
        {
          resourceType: 'resourceType 1',
          quantityConsumed: 0.7,
          unitOfMeasurement: 'unitOfMeasurement 1',
          periodOfConsumption: '2024-05-07T15:35:48.579Z',
          id: 50,
        },
        {
          resourceType: 'resourceType 2',
          quantityConsumed: 0.98,
          unitOfMeasurement: 'unitOfMeasurement 2',
          periodOfConsumption: '2024-11-11T10:28:38.497Z',
          id: 33,
        },
        {
          resourceType: 'resourceType 3',
          quantityConsumed: 0.44,
          unitOfMeasurement: 'unitOfMeasurement 3',
          periodOfConsumption: '2024-08-14T17:04:51.258Z',
          id: 35,
        },
        {
          resourceType: 'resourceType 4',
          quantityConsumed: 0.01,
          unitOfMeasurement: 'unitOfMeasurement 4',
          periodOfConsumption: '2023-08-04T04:40:18.852Z',
          id: 88,
        },
        {
          resourceType: 'resourceType 5',
          quantityConsumed: 0.46,
          unitOfMeasurement: 'unitOfMeasurement 5',
          periodOfConsumption: '2024-03-16T07:05:01.431Z',
          id: 100,
        },
      ],
    };
    //Autogenerate multiple such calls ie for each resource and its data object
    let isSeeded = await this.IsSeeded();
    //if (!isSeeded) {
    //forcing app recreation
    if (true) {
      console.log('   Seeding database...');
      await this.SeedResource('UsersEntity', data.Users);
      await this.SeedResource('DepartmentsEntity', data.Departments);
      await this.SeedResource('InitiativesEntity', data.Initiatives);
      await this.SeedResource('GoalsEntity', data.Goals);
      await this.SeedResource('EmissionSourcesEntity', data.EmissionSources);
      await this.SeedResource('ResourceUsageEntity', data.ResourceUsage);
      await this.SeedResource('SettingsEntity', {
        settingname: 'isSeeded',
        settingvalue: 'true',
      });
    } else {
      console.log('   Database seeded already!');
    }
  }
  static async IsSeeded() {
    const repo = Database.ds.getRepository('SettingsEntity');
    let rec: any = await repo.findOne({
      select: {
        settingname: true,
        settingvalue: true,
      },
      where: {
        settingname: 'isSeeded',
      },
    });
    if (rec && rec.settingvalue) return true;
    return false;
  }
  static async SeedResource(resourceName: any, resourceData: any) {
    const repo = Database.ds.getRepository(resourceName);
    //await repo.clear();
    console.log('   Seeding table ' + resourceName);
    await repo.upsert(resourceData, ['id']);
  }
}
